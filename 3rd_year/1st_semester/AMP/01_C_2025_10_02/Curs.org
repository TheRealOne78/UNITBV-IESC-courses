#+title: Curs

NOTE: View this file using a standard ASCII / UTF-8 editor with a mono font

* Transformari baze
** Transformari intregi baza 10 -> baza 2
*** idk
1. 45/2 = 22, 1 ^
2. 22/2 = 11, 0 |
3. 11/2 = 5,  1 |
4. 5/2  = 2,  1 |
5. 2/2  = 1,  0 |
6. 1/2  = 0,  1 |
=> 101101

*** Rational 47 (impartiri succesive), 125 -> inmultiri
47_10 = 101111_2
47_10 = 32 +  8 +  4 +  2 +  1
        2^5  2^3  2^2  2^1  2^0

0.125 * 2 = 0.25 |
0.25  * 2 = 0.5  |
0.5   * 2 = 1.   v  => 001_2

- Partea intreaga -> impartire, jos-sus
- Partea fractionara -> inmultire, sus-jos
** Transformari dec - hex
1. 97.125_10 = 0110 0001,0010_2
             6    1    2
= 61,2_16

2. 2FA_16 = 0010 1111,1010_2


3. 13 = 1101
        0010 + neg biti
        ____
        0011
* Assembly
.data
.global main
.text => instructiuni (logica de program)


if      (instruction fetch)
id      (instruction decode)
e [Ex]  (execute)
m [Mem] (memorate)
wr      (write back) [se rescrie in memorie rezultatul operatiei]



.data
        sir: .asciiz "calcuatoare"
        raspuns: .asciiz "coduri ascii corespunzatoare: "

.text
.globl main

la - load address
li - load immediate
lb - load byte
lw - load word (32b)
lh - load half (16b)

Dimensiunea fiecarui registru este de 32 de biti

** .asciiz vs .ascii
.asciiz - NULL terminator
.ascii - no terminator

** la
`la $a0 (registru de destinatie), sir`
** lb
`lb $t0 0($a0)`
** beq - brench and equal
`beq $t0, $0, exit` - Daca un character este null, redirectioneaza la exit
** exit
exit: li $v0, 10
        syscall
10 - exit
4 - print-str
1 - print-int
5 - read_int
